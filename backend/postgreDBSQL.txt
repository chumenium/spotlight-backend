user:toudai
database:spotlight
password:kcsf2026
isolationLevel:read committed
timezone:Asia/Tokyo
GRANT ALL PRIVILEGES
client_encoding:utf8

--属性の説明
contentID:一意な数値を自動で設定
spotlightnum:数値
contentpath:128文字可変
link:128文字可変
posttimestamp:投稿時間年月日時分
commentID:contentIDごとに一意な自動で設定される数値
commenttimestamp:投稿時間年月日時分
commenttext:コメントテキストを格納
parentcommentID:自己参照
userID:一意な数値を自動で設定
username:アプリ内で一意なユーザの名前
iconimgpath:128文字可変
spotlightflag:true,falseを判断
bookmarkflag:true,falseを判断
playlistID:userIDごとに一意な自動で設定される数値
contentID:userIDごとplaylistIDごとに一意な自動で設定される数値
playnum:再生回数を保存する

--DB接続
psql -U toudai -d spotlight

--DB作成
CREATE DATABASE spotlight;

-- userテーブル
CREATE TABLE user (
    userID SERIAL PRIMARY KEY,
    iconimgpath VARCHAR(128)
);

-- contentテーブル
CREATE TABLE content (
    contentID SERIAL PRIMARY KEY,
    spotlightnum INTEGER,
    contentpath VARCHAR(128),
    link VARCHAR(128),
    title VARCHAR(128),
    posttimestamp TIMESTAMP,
    userID INTEGER REFERENCES "user"(userID)
);

-- commentテーブル
CREATE TABLE comment (
    contentID INTEGER REFERENCES content(contentID),
    commentID SERIAL,
    userID INTEGER REFERENCES "user"(userID),
    commenttimestamp TIMESTAMP,
    commenttext TEXT,
    parentcommentID INTEGER,
    PRIMARY KEY (contentID, commentID),
    FOREIGN KEY (parentcommentID) REFERENCES comment(commentID)
);

-- contentuserテーブル
CREATE TABLE contentuser (
    contentID INTEGER REFERENCES content(contentID),
    userID INTEGER REFERENCES "user"(userID),
    spotlightflag BOOLEAN,
    bookmarkflag BOOLEAN,
    PRIMARY KEY (contentID, userID)
);

-- playlistテーブル
CREATE TABLE playlist (
    userID INTEGER REFERENCES "user"(userID),
    playlistID SERIAL,
    PRIMARY KEY (userID, playlistID)
);

-- playlistdetailテーブル
CREATE TABLE playlistdetail (
    userID INTEGER,
    playlistID INTEGER,
    contentID INTEGER REFERENCES content(contentID),
    PRIMARY KEY (userID, playlistID, contentID),
    FOREIGN KEY (userID, playlistID) REFERENCES playlist(userID, playlistID)
);


--------------------------------コピペOK----------------------------------------------

drop table notification;
drop table serchhistory;
drop table playhistory;
drop table playlistdetail;
drop table playlist;
drop table contentuser;
drop table comment;
drop table content;
drop table "user";

CREATE TABLE "user" (
    userID VARCHAR(512) PRIMARY KEY,
    username VARCHAR(30),
    iconimgpath VARCHAR(128),
    token TEXT,
    notificationenabled BOOLEAN DEFAULT FALSE
);
CREATE TABLE content (
    contentID SERIAL PRIMARY KEY,
    spotlightnum INTEGER,
    contentpath VARCHAR(128),
    link VARCHAR(128),
    title VARCHAR(128),
    posttimestamp TIMESTAMP,
    playnum INTEGER DEFAULT 0,
    userID VARCHAR(512) REFERENCES "user"(userID)
);
CREATE TABLE comment (
    contentID INTEGER REFERENCES content(contentID),
    commentID SERIAL,
    userID VARCHAR(512) REFERENCES "user"(userID),
    commenttimestamp TIMESTAMP,
    commenttext TEXT,
    parentcommentID INTEGER,
    PRIMARY KEY (contentID, commentID),
    FOREIGN KEY (contentID, parentcommentID)
        REFERENCES comment(contentID, commentID)
);
CREATE TABLE contentuser (
    contentID INTEGER REFERENCES content(contentID),
    userID VARCHAR(512) REFERENCES "user"(userID),
    spotlightflag BOOLEAN,
    bookmarkflag BOOLEAN,
    PRIMARY KEY (contentID, userID)
);
CREATE TABLE playlist (
    userID VARCHAR(512) REFERENCES "user"(userID),
    playlistID SERIAL,
    PRIMARY KEY (userID, playlistID)
);
CREATE TABLE playlistdetail (
    userID VARCHAR(512),
    playlistID INTEGER,
    contentID INTEGER REFERENCES content(contentID),
    PRIMARY KEY (userID, playlistID, contentID),
    FOREIGN KEY (userID, playlistID) REFERENCES playlist(userID, playlistID)
);
CREATE TABLE serchhistory (
    userID VARCHAR(512),
    serchID SERIAL,
    serchword TEXT,
    PRIMARY KEY (userID, serchID)
);
CREATE TABLE playhistory (
    userID VARCHAR(512),
    playID SERIAL,
    contentID INTEGER REFERENCES content(contentID),
    PRIMARY KEY (userID, playID)
);
CREATE TABLE notification(
    userID VARCHAR(512),
    notificationID SERIAL,
    notificationtimestamp TIMESTAMP,
    contentuserCID int,
    contentuserUID VARCHAR(512),
    comCTID int,
    comCMID int,
    PRIMARY KEY (userID, notificationID),
    FOREIGN KEY (contentuserCID, contentuserUID) REFERENCES contentuser(contentID, userID),
    FOREIGN KEY (comCTID, comCMID) REFERENCES comment(contentID, commentID)
);